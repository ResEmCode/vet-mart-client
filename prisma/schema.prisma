generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     userRole @default(USER)
  resetPswLink String?

  provider   String?
  providerId String?

  verified DateTime?
  verificationCode VerificationCode?

  cart Cart[]
  favorites Favorite[]

  discount  DiscountUser?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DiscountUser {
  id        Int    @id @default(autoincrement())

  discount  Int @default(0)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Category {
  id       Int    @id @default(autoincrement())
  name     String @unique
  subtitle String
  imageUrl String

  products           Product[]
  filters   CategoryOnFilter[]
 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CategoryOnFilter {
  id         Int    @id @default(autoincrement())

  categoryId Int
  filterId   Int

  category Category @relation(fields: [categoryId], references: [id])
  filter   Filter   @relation(fields: [filterId], references: [id])

  @@unique([categoryId, filterId])
}

model Filter {
  id         Int @id @default(autoincrement())

  title      String
  titleEn    String

  groups     FilterOnGroup[]
  categories CategoryOnFilter[]
}


model FilterGroup {
  id        Int @id @default(autoincrement())

  title     String
  titleEn   String

  values    GroupsOnValue[]
  filters    FilterOnGroup[]

}

model FilterOnGroup {
  id  Int @id @default(autoincrement())

  filter    Filter @relation(fields: [filterId], references: [id])
  filterId  Int
 

  filterGroup FilterGroup @relation(fields: [filterGroupId], references: [id])
  filterGroupId  Int
}

model FilterValue {
  id       Int @id @default(autoincrement())

  label    String

  groups   GroupsOnValue[]
  
}

model GroupsOnValue {
  id      Int @id @default(autoincrement())

  filterGroup  FilterGroup @relation(fields: [filterGroupId], references: [id])
  filterGroupId Int

  filterValue   FilterValue @relation(fields: [filterValueId], references: [id])
  filterValueId Int
}



model Cart {
  id Int @id @default(autoincrement())

  token String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Favorite{
    id Int @id @default(autoincrement())

    user   User? @relation(fields: [userId], references: [id])
    userId Int?  @unique   
}

model VerificationCode {
id Int @id @default(autoincrement())

user   User? @relation(fields: [userId], references: [id])
userId Int?  @unique

code String

createdAt DateTime @default(now())

@@unique([userId, code])
}

model Product {
  id          Int    @id @default(autoincrement())
  country     String
  name        String
  description String
  brand       String
  images      String[]
  keywords    String[]
  productType productTypeList

  // discount   DiscountProduct? @relation(name: "ProductDiscount") 
  discount Int?

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  variants   ProductVariant[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// model DiscountProduct {
//   id            Int    @id @default(autoincrement())

//   price         Int
//   discountPrice Int

//   product   Product @relation(name: "ProductDiscount", fields: [productId], references: [id]) 
//   productId Int  @unique 

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }



model ProductVariant {
  id        Int    @id @default(autoincrement())
  article   Int
  price     Int
  currency  String
  count     Int
  unit      String
  available Boolean

  product   Product @relation(fields: [productId], references: [id],  onDelete: Cascade)
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}




enum status {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum userRole {
  USER
  ADMIN
}


enum productTypeList{
toys
veterinaryDrugs
food
different
}

