generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  // directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id Int @id @default(autoincrement())

  fullName String
  email    String   @unique
  password String
  role     userRole @default(USER)
  resetPswLink String?

  provider   String?
  providerId String?

  verified DateTime?
  verificationCode VerificationCode?

  cart Cart?


  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id       Int    @id @default(autoincrement())
  name     String @unique
  subtitle String
  imageUrl String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id Int @id @default(autoincrement())

  article     Int
  country     String
  name        String
  imageUrl    String
  price       Int
  description String
  isAvailable Boolean
  composition String
  sale        Boolean
  salePrice   Int?

  reviews   ProductReviews[]
  cartItems CartItem[]
  variants  ProductVariant[]

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Filters {
  id      Int @id @default(autoincrement())

  title    String
  checkbox String[]
}

model ProductVariant {
  id Int @id @default(autoincrement())

  weight      String
  brand       String
  feedClass   String
  price       String
  purpose     String
  age         String
  ingredients String


  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ProductReviews {
  id Int @id @default(autoincrement())

  name        String
  imageUrl    String
  description String
  date        String
  rate        Int

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Cart {
  id Int @id @default(autoincrement())

  token String

  user   User? @relation(fields: [userId], references: [id])
  userId Int?  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CartItem {
  id Int @id @default(autoincrement())

  weight String

  product   Product @relation(fields: [productId], references: [id])
  productId Int

  quantity Int @default(1)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model VerificationCode {
id Int @id @default(autoincrement())

user   User? @relation(fields: [userId], references: [id])
userId Int?  @unique

code String

createdAt DateTime @default(now())

@@unique([userId, code])
}

enum status {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum userRole {
  USER
  ADMIN
}
